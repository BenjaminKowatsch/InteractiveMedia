import groovy.json.JsonSlurperClassic

pipeline {
    tools {
        gradle "Gradle 4.3"
    }
    agent any
    stages {
        stage ('Checkout code') {
            steps {
                git branch: 'master', credentialsId: '3ccd0e84-c917-4b30-b440-016c57545b2d', url: 'git@gitlab.mi.hdm-stuttgart.de:bk095/InteraktiveMedien.git'
            }
        }

        stage ('Build') {
            steps {
                sh 'docker-compose -f docker-compose.prod.yml build'
                dir('InteractiveMedia') {
                    sh 'gradle clean'
                    sh 'mkdir -p app/build/outputs/checkstyle'
                    sh 'mkdir -p app/build/outputs/findbugs'
                    sh 'mkdir -p app/build/reports'
                    sh 'mkdir -p app/build/reports/tests/testDebugUnitTest'
                    sh 'mkdir -p app/build/reports/tests/testReleaseUnitTest'
                    sh 'cp -f ../Jenkins/Master-BuildDeploy-JohnnyDebt/failure_report.html app/build/outputs/checkstyle/google_checks-output.html'
                    sh 'cp -f ../Jenkins/Master-BuildDeploy-JohnnyDebt/failure_report.html app/build/outputs/findbugs/findbugs-output.html'
                    sh 'cp -f ../Jenkins/Master-BuildDeploy-JohnnyDebt/failure_report.html app/build/reports/lint-results.html'
                    sh 'cp -f ../Jenkins/Master-BuildDeploy-JohnnyDebt/failure_report.html app/build/reports/tests/testDebugUnitTest/index.html'
                    sh 'cp -f ../Jenkins/Master-BuildDeploy-JohnnyDebt/failure_report.html app/build/reports/tests/testReleaseUnitTest/index.html'
                    sh 'gradle build'
                }
            }
            post {
                always {
                    dir('InteractiveMedia') {
                        publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'app/build/outputs/checkstyle/',
                    reportFiles: 'google_checks-output.html',
                    reportName: 'HTML Google Checks Report',
                    reportTitles: ''])
                    publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'app/build/outputs/findbugs/',
                    reportFiles: 'findbugs-output.html',
                    reportName: 'HTML Findbugs Report',
                    reportTitles: ''])
                    publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'app/build/reports/',
                    reportFiles: 'lint-results.html',
                    reportName: 'HTML Android Lint Report',
                    reportTitles: ''])
                    publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'app/build/reports/tests/testDebugUnitTest/',
                    reportFiles: 'index.html',
                    reportName: 'HTML JUnit Debug Report',
                    reportTitles: ''])
                    publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'app/build/reports/tests/testReleaseUnitTest/',
                    reportFiles: 'index.html',
                    reportName: 'HTML JUnit Release Report',
                    reportTitles: ''])
                    }
                }
            }
        }
/*
        stage ('API tests') {
            steps {
				sh 'docker-compose -f docker-compose.backend-testing-api.yml rm -fsv'
				sh 'docker-compose -f docker-compose.backend-testing-api.yml build'
				sh 'docker-compose -f docker-compose.backend-testing-api.yml up --abort-on-container-exit'
                script {
                    if (fileExists('./report-be-apitest/mochawesome.html')) {
                        sh 'rm -r ./report-be-apitest/'
                    }
                }
                sh 'docker cp $(docker ps --latest --format "{{.ID}}"):/app/mochawesome-report ./report-be-apitest/'
                publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'report-be-apitest',
                    reportFiles: 'mochawesome.html',
                    reportName: 'API-Tests',
                    reportTitles: ''])
				sh 'docker-compose -f docker-compose.backend-testing-api.yml rm -fsv'
            }
        }
*/
        stage ('Generate docu') {
            steps {
                dir('InteractiveMedia') {
                    sh 'gradle javadoc'
                    publishHTML( [allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: false,
                        reportDir: 'javadoc',
                        reportFiles: 'index.html',
                        reportName: 'JavaDoc',
                        reportTitles: ''])
                }
                sh 'mkdir -p ./generated_doc'
                sh 'rm -r ./generated_doc'
                sh 'docker build -f backend/doc/Dockerfile -t apidoc:latest backend'
                sh 'docker run apidoc:latest'
                sh 'docker cp $(docker ps --latest --format "{{.ID}}"):/doc ./generated_doc'
                publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'generated_doc',
                    reportFiles: 'index.html',
                    reportName: 'ApiDocs',
                    reportTitles: ''])
            }
        }

        stage ('Store artefacts') {
            steps {
                sh 'docker-compose -f docker-compose.prod.yml push'
            }
        }

        stage ('Deploy artefacts') {
            steps {
                sh 'docker-compose -f docker-compose.prod.yml stop'
                sh 'docker-compose -f docker-compose.prod.yml rm -sf'
                sh 'docker-compose -f docker-compose.prod.yml pull'
                sh 'docker-compose -f docker-compose.prod.yml up -d'
            }
        }
        stage ('Generate lighthouse report') {
            steps {
                sh 'mkdir -p ./lighthouse_reports'
                publishHTML( [allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: './lighthouse_reports',
                    reportFiles: 'report.report.html',
                    reportName: 'Lighthouse report',
                    reportTitles: ''])
                script {
                    def json = readFile(file:'./lighthouse_reports/report.report.json')
                    def data = new JsonSlurperClassic().parseText(json)
                    echo "data: ${data}"
                }
            }
        }
    }

    post {
        success {
            slackSend (channel: '#jenkins', color: '#00C853', message: "Success: Job ${env.JOB_NAME}. Check it out <${env.BUILD_URL}|${env.BUILD_NUMBER}>")
        }
        failure {
            slackSend (channel: '#jenkins', color: '#D50000', message: "Failure: Job ${env.JOB_NAME}. Check it out <${env.BUILD_URL}|${env.BUILD_NUMBER}>")
        }
    }
}
